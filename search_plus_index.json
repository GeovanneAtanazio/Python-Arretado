{"./":{"url":"./","title":"Curso Python Arretado","keywords":"","body":"Apresentação Este é o material oficial do curso Python Arretado construído por Geovanne Atanazio, seus contatos são: , , . Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "},"introducao.html":{"url":"introducao.html","title":"Introdução","keywords":"","body":"Introdução Python é uma linguagem de programação poderosa e divertida que tem crescido devido sua compatibilidade — roda na maioria dos Sistemas Operacionais (SOs) — e capacidade de auxiliar outras linguagens. Com ela, é possível fazer diversas coisas como: análise de dados, inteligência artificial e construção de sistemas web, mobile e desktop. A simplicidade do Python encoraja a programação modularizada. Dessa forma, códigos escritos para um programa podem ser reutilizados em outros. Por conta disso, a linguagem provê uma vasta coleção de módulos que podem ser utilizados como base ou complemento para novos projetos. História Python foi criada em 1989 por Guido Van Rossum, no Centro de Matemática Stichting (CWI) na Holanda, com o objetivo de criar uma linguagem de programação que tivesse sintaxe semelhante a linguagem de programação ABC e fosse capaz de interagir com o SO Amoeba. Nessa época, a aceitação de Python foi tão boa que em 1991 Guido lançou sua cria na Internet. Origem do nome Muitas pessoas costumam pensar que o nome Python tem origem em um tipo de cobra, já que o sua logo mostra a imagem de uma cobra azul e outra amarela. No entanto, o nome da língua vem do gosto de seu criador pelos humoristas britânicos Monty Python. Ruptura entre versões Em dezembro de 2008 foi lançado a versão 3.0 do Python, mais conhecida como Python3. Nela, houve uma quebra de compatibilidade com o Python2 — família de versões anterior da linguagem. Essa ruptura foi feita para corrigir falhas que foram descobertas e reestruturar a linguagem. Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "},"montagem_de_ambiente.html":{"url":"montagem_de_ambiente.html","title":"Montagem de ambiente","keywords":"","body":"Montagem de ambiente Para começar a trabalhar com Python é preciso operar uma máquina que entenda a linguagem. Atualmente, é possível utilizar Python em ambientes locais e online. Python em ambientes locais O Python está disponível para os três principais SOs feitos para computadores pessoais — sendo eles GNU/Linux, Windows e macOS. Caso opte por aprender Python em algum deles, será preciso fazer configurações que facilitam o trabalho com a linguagem. Esse processo é conhecido como montagem de ambiente. A seguir será explicado, de forma breve, como fazer a montagem de ambiente Python em cada um dos SOs citados. Python no GNU/Linux e no macOS No GNU/Linux e no macOS, o Python já vem instalado. Porém, em alguns caso, a versão instalada é o Python2 que vem sendo substituída gradativamente pelo Python3. Para saber qual versão está instalada, basta acessar o terminal do SO e executar o comando: python --version Se o Python3 já estiver instalado, já é possível executá-lo. Entretanto, no cado de somente o Python2 estiver instalado, será preciso baixar o Python3 por meio do site oficial e instalá-lo. Python no Windows No SO Windows, para que um usuário possa utilizar o Python, é preciso efetuar sua instalação — ao contrário do GNU/Linux e do macOS, no Windows nenhuma versão do Python vem instalada. Entretanto, existe a possibilidade de alguém já ter feito a instalação do Python no computador. Para verificar basta acessar o terminal do Windows e executar o comando: python --version Se o Python3 já estiver instalado, é possível executá-lo. Caso contrário, será preciso baixar o Python3 por meio do site oficial e instalá-lo — o mesmo vale se for identificado a instalação somente do Python2. Interface de desenvolvimento Com a instalação do Python finalizada, o próximo passo é instalar uma ferramenta que auxilie e facilite a escrita de código, popularmente conhecida como Integrated Development Environment (IDE) ou, em portugês, Ambiente de Desenvolvimento Integrado. Atualmente existem muitas IDEs, aqui indicaremos o Visual Studio Code, que está disponível para GNU/Linux, Windows e macOS. Sinta-se a vontade para escolher a ferramenta que mais te agrade. Python em ambientes online Também é possível utilizar o Python em ambientes online. Na internet existem diferentes ferramentas desse tipo, aqui indicaremos o Replit. Sinta-se a vontade para escolher a ferramenta que mais te agrade. Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "},"primeiro_algoritmo.html":{"url":"primeiro_algoritmo.html","title":"Primeiro algoritmo","keywords":"","body":"Primeiro algorítmo Com o ambiente de desenvolvimento pronto já é possível começar a programar. Nessa seção será ensinado como fazer um algoritmo simples em Python utilizando as operações de entrada e saída de dados — conhecidas popularmente pela gíria I/O, que em inglês significa Input/Output ou, em português, Entrada/Saída. ⚠️ Observação: Para começar a escrever algoritmos é preciso criar um arquivo com a extensão da linguagem que se deseja trabalhar. Arquivos com a extensão .py indicam que os códigos escritos nele são da linguagem Python. Com o arquivo criado, é só utilizar o IDE para abri-lo e começar a codificar. Caso esteja utilizando um ambientes de desenvolvimento online, geralmente, o processo é ainda mais simples, visto quê o arquivo .py é criado automaticamente. Saída de dados Exibir dados com Python é uma tarefa simples. Nesse primeiro exercício, o objetivo é fazer o output da frase \"Olá Mundo!\". Ela é popularmente apresentada para novos programadores quando estão dando os primeiro passos no mundo da programação. Para conseguir exibir a mensagem, é preciso utilizar o método print(). Dentro do parênteses, coloca-se o que deseja exibir no terminal. Assim, para conseguir exibir a frase \"Olá Mundo!\", basta escrever : print(\"Olá Mundo!\") # output = Olá Mundo! Quando o arquivo for executando o algoritmo escrito será interpretado e a mensagem \"Olá Mundo!\" aparecerá no terminal. Entrada de dados Fazendo uma pequena alteração no código é possível fazer o output de uma mensagem escrita no teclado ao invés de um texto previamente definido. Para isso basta utilizar o método input() e guardar os dados inseridos. Em seguida, é só exibir os dados com o método print(), da seguinte forma: dados = input(\"Insira algo aqui: \") print(dados) Ao executar um arquivo com o código a cima, o terminal exibirá a mensagem \"Insira algo aqui: \" e irá aguardar a entrada de uma mensagem. Por isso, para continuar a execução do código é preciso digitar a mensagem e apertar a tecla Enter. Em seguida a variável dados irá guardar a mensagem escrita. Por fim, a variável dados é passada para o método print(), que faz o output da mensagem. Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "},"tipos_de_variaveis.html":{"url":"tipos_de_variaveis.html","title":"Variaveis e seus tipos","keywords":"","body":"Variaveis e seus tipos Quando se trata de linguagens de programação, é comum identificar o tipo de dado que uma variável receberá. No entanto, em Python, isso não é necessário. Por ser uma linguagem dinamicamente tipada — o que significa que não é necessário declarar o tipo de variável ou fazer casting, mudar o tipo de variável, pois o interpretador se encarrega disso — é fácil banalizar a importância de conhecer os tipos de variáveis. Porém, compreender esse assunto é muito importante para quem desenvolve código. Isso porque, durante uma execução, o tipo da variável pode ser alterado e entender esse comportamento pode ser o diferencial para conseguir realizar a construção de um algoritmo. Durante esta seção será utilizado o método type() do Python. Com ele, é possível saber o tipo de uma variável ou de um dado com precisão. Tipos numéricos Os tipos de dados usados para números se dividem em três conjuntos: inteiro, ponto flutuante e complexos. Inteiro (int) Esse tipo representa o conjunto dos números inteiros, ou seja, são os números positivos e negativos que não apresentam parte decimal. A seguir, será apresentado um algoritmo que insere um valor inteiro dentro de uma variável e exibe o seu tipo, que no caso é um int, veja: numero = 7 print(type(numero)) # output = ⚠️ Observação: Os números inteiros podem ser representados também nos formatos binário, hexadecimal e octal. Abaixo há exemplos dessas representações de forma respectiva: 0b10000, 0b11111111 0x01, 0x10, 0xFF 0o1, 0o20, 0o377 Ponto flutuante ou decimal (float) Representação de números reais, ou seja, os que contém casas decimais. A seguir, será apresentado um algoritmo que insere um valor decimal dentro de uma variável e exibe o seu tipo, que no caso é um float, veja: altura = 7.1 print(type(altura)) # output = Complexo (complex) Os números complexos são mais utilizados na engenharia e pesquisa. No Python, a parte imaginária do número recebe a letra j — podendo ser maiúscula ou minúscula. A seguir, será apresentado um algoritmo que insere um numero complexo dentro de uma variável e exibe o seu tipo, que no caso é um complex, veja: complexo = 7j print(type(complexo)) # output = String (str) Trata-se de um conjunto de caracteres dispostos numa determinada ordem, geralmente utilizada para representar palavras, frases ou textos. No Python, para indicar que o código escrito é uma string, é preciso colocar aspas simples (') ou aspas duplas (\") tanto no inicio, quanto no fim da cadeia de caracteres. A seguir, será apresentado um algoritmo que insere uma string dentro de uma variável e exibe o seu tipo, que no caso é um str, veja: texto = 'Olá mundo!' print(type(texto)) # output = Boolean (bool) É um tipo de dado lógico que pode assumir apenas dois valores: falso ou verdadeiro — False ou True em Python. A seguir, será apresentado um algoritmo que insere um boolean dentro de uma variável e exibe o seu tipo, que no caso é um bool, veja: mentira = True print(type(mentira)) # output = Na lógica computacional, considera-se o False como 0 e o True como 1. Por isso, no Python, um boolean é um subtipo inteiro onde 1 é equivalente a True e 0 equivale a False. Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "},"glossario.html":{"url":"glossario.html","title":"Glossário","keywords":"","body":"Palavras-chaves Esta seção apresenta um glossário com as palavras-chaves presentes neste material. As explicações contidas aqui tem o objetivo de elucidar, rapidamente, a compreensão do leitor perante as informações trazidas. Termos e siglas Definição e significado Linguagem de Programação Linguagem formal que, através de uma série de instruções, permite que um programador escreva um conjunto de ordens, para criar programas que controlam o comportamento físico e lógico de uma máquina. Sistema Operacional (SO) É o conjunto de programas que fazem a interface do usuário e seus programas com o computador. Terminal Também conhecido como \"console\" ou simplesmente \"terminal virtual\", é um programa que executa um shell — programa responsável por interpretar as instruções enviadas pelo usuário e seus programas para o SO. Extensão de Arquivos São os caracteres separados do nome do arquivo por um ., sendo úteis para localizar ou indicar como utilizar o arquivos. Método bloco de código que contém uma série de instruções. Algoritmo Qualquer sequência finita de passos que levam à execução de uma certa tarefa ou à resolução de um problema. Variável Reprezentação do espaço na memória do computador destinado a um dado, sendo alterado durante a execução do algoritmo. Interpretador Faz a conversão, em tempo real, do código escrito pelo programador para linguagem de máquina, formato compreendido pelo computador que está executando o algoritmo. Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "},"bibliografia.html":{"url":"bibliografia.html","title":"Bibliografia","keywords":"","body":"Referências bibliográficas Esta seção apresenta o conjunto das fontes efetivamente utilizadas na construção deste manual. Cada referência dessa bibliografia está organizada pelo tópico que a mesma ajudou a construir — para facilitar uma busca mais aprofundada do conteúdo. Introdução Python para quem está começando. Python Brasil. Disponível em: https://python.org.br/introducao/. Acesso em: 27 de mar. 2022. Python e orientação a objetos. Caelum. Disponível em: https://www.caelum.com.br/apostila/apostila-python-orientacao-a-objetos.pdf. Acesso em: 27 de mar. 2022. Abrindo seu apetite — documentação Python 3.10.4. Python. Disponível em: https://docs.python.org/pt-br/3/tutorial/appetite.html. Acesso em: 27 de mar. 2022. O que é uma linguagem de programação e quais os tipos existem?. Rockcontent. Disponível em: https://rockcontent.com/br/blog/linguagem-de-programacao/. Acesso em: 27 de mar. 2022. História História do Python. Python Brasil. Disponível em: https://wiki.python.org.br/HistoriaDoPython. Acesso em: 27 de mar. 2022. Python: como surgiu a linguagem e o seu cenário atual. Vulpi. Disponível em: https://blog.vulpi.com.br/python-como-surgiu/#:~:text=Python%20foi%20criado%20no%20final,com%20o%20sistema%20operacional%20Amoeba.. Acesso em: 27 de mar. 2022. Python e orientação a objetos. Caelum. Disponível em: https://www.caelum.com.br/apostila/apostila-python-orientacao-a-objetos.pdf. Acesso em: 27 de mar. 2022. Origem do nome Python: A origem do nome. Alura. Disponível em: https://www.alura.com.br/artigos/python-origem-do-nome. Acesso em: 27 de mar. 2022. Python: como surgiu a linguagem e o seu cenário atual. Vulpi. Disponível em: https://blog.vulpi.com.br/python-como-surgiu/#:~:text=Python%20foi%20criado%20no%20final,com%20o%20sistema%20operacional%20Amoeba.. Acesso em: 27 de mar. 2022. Ruptura entre versões Python: como surgiu a linguagem e o seu cenário atual. Vulpi. Disponível em: https://blog.vulpi.com.br/python-como-surgiu/#:~:text=Python%20foi%20criado%20no%20final,com%20o%20sistema%20operacional%20Amoeba.. Acesso em: 27 de mar. 2022. Montagem de ambiente Curso Python #03 - Instalando o Python3 e o IDLE. Curso em Vídeo. Disponível em: https://youtu.be/VuKvR1J2LQE. Acesso em: 19 de mai. 2022. Python em ambientes locais Curso Python #03 - Instalando o Python3 e o IDLE. Curso em Vídeo. Disponível em: https://youtu.be/VuKvR1J2LQE. Acesso em: 19 de mai. 2022. Download Python. Python. Disponível em: https://www.python.org/downloads/. Acesso em: 19 de mai. 2022. Python no GNU/Linux e no macOS Curso Python #03 - Instalando o Python3 e o IDLE. Curso em Vídeo. Disponível em: https://youtu.be/VuKvR1J2LQE. Acesso em: 19 de mai. 2022. Download Python. Python. Disponível em: https://www.python.org/downloads/. Acesso em: 19 de mai. 2022. Python no Windows Curso Python #03 - Instalando o Python3 e o IDLE. Curso em Vídeo. Disponível em: https://youtu.be/VuKvR1J2LQE. Acesso em: 19 de mai. 2022. Download Python. Python. Disponível em: https://www.python.org/downloads/. Acesso em: 19 de mai. 2022. Interface de desenvolvimento Visual Studio Code. Visual Studio Code. Disponível em: https://code.visualstudio.com/. Acesso em: 19 de mai. 2022. Python em ambientes online Replit. Replit. Disponível em: https://replit.com/languages/python3. Acesso em: 19 de mai. 2022. Primeiro algorítmo Fundamentos de programação. Programação Em C++: Algoritmos, Estruturas De Dados E Objetos. Disponível em: https://statics-submarino.b2w.io/sherlock/books/firstChapter/6718890.pdf. Acesso em: 19 de mai. 2022. Gerenciamento de arquivos. Manual GNU/Linux. Disponível em: https://geovanneatanazio.github.io/manual_linux/gerenciamento_de_arquivos.html. Acesso em: 20 de mai. 2022. Saída de dados O shell e o terminal. Manual GNU/Linux. Disponível em: https://geovanneatanazio.github.io/manual_linux/o_shell_e_o_terminal.html. Acesso em: 20 de mai. 2022. Entrada e Saída. O tutorial de Python. Disponível em: https://docs.python.org/pt-br/3/tutorial/inputoutput.html. Acesso em: 20 de mai. 2022. Entrada de dados Entrada e Saída. O tutorial de Python. Disponível em: https://docs.python.org/pt-br/3/tutorial/inputoutput.html. Acesso em: 20 de mai. 2022. O que são variáveis e para que elas servem na programação?. People. Disponível em: https://www.people.com.br/noticias/informatica/o-que-sao-variaveis-e-para-que-elas-servem-na-programacao. Acesso em: 20 de mai. 2022. Tipos de variáveis Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Métodos de tradução: interpretador x compilador. GeekHunter. Disponível em: https://blog.geekhunter.com.br/metodos-de-traducao-compiladores-ou-interpretadores/. Acesso em: 24 de mai. 2022. Métodos de tradução: interpretador x compilador. iMasters. Disponível em: https://imasters.com.br/desenvolvimento/metodos-de-traducao-interpretador-x-compilador. Acesso em: 24 de mai. 2022. Linguagem da Máquina. TechLib. Disponível em: https://techlib.wiki/definition/machine_language.html. Acesso em: 24 de mai. 2022. Tipos numéricos Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Tipos de dados em Python: Numéricos. DevMedia. Disponível em: https://www.devmedia.com.br/tipos-de-dados-em-python-numericos/40652. Acesso em: 24 de mai. 2022. Inteiro (int) Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Tipos de dados em Python: Numéricos. DevMedia. Disponível em: https://www.devmedia.com.br/tipos-de-dados-em-python-numericos/40652. Acesso em: 24 de mai. 2022. Ponto flutuante ou decimal (float) Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Tipos de dados em Python: Numéricos. DevMedia. Disponível em: https://www.devmedia.com.br/tipos-de-dados-em-python-numericos/40652. Acesso em: 24 de mai. 2022. Complexo (complex) Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Tipos de dados em Python: Numéricos. DevMedia. Disponível em: https://www.devmedia.com.br/tipos-de-dados-em-python-numericos/40652. Acesso em: 24 de mai. 2022. String (str) Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Tipos de dados em Python: Numéricos. DevMedia. Disponível em: https://www.devmedia.com.br/tipos-de-dados-em-python-numericos/40652. Acesso em: 24 de mai. 2022. Boolean (bool) Tipos de variáveis disponíveis no Python. Python Academy. Disponível em: https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python. Acesso em: 24 de mai. 2022. Tipos de dados em Python: Numéricos. DevMedia. Disponível em: https://www.devmedia.com.br/tipos-de-dados-em-python-numericos/40652. Acesso em: 24 de mai. 2022. Copyright © 2022 Geovanne Atanazio and Mayara Machado all right reserved，powered by GitbookArquivo revisado pela última vez em 26/05/2022 "}}